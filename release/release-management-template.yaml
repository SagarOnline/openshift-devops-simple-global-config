apiVersion: v1
kind: Template
labels:
  template: release-management-template
message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  
metadata:
  annotations:
    openshift.io/display-name: Release Management Template
    description: |-
      This example showcases the new Jenkins Pipeline integration in OpenShift,
      which performs continuous integration and deployment right on the platform.
      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD process - that
      leverages the underlying OpenShift platform for dynamic and scalable
      builds. OpenShift integrates the status of your pipeline builds into the web
      console allowing you to see your entire application lifecycle in a single view.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: release-pipeline-template
parameters:
- description: The name of the application to which this template belongs. It should not have any whitespaces. for e.g. marketdata, accounts, etc.
  displayName: Application Name
  name: APP_NAME
  required: true
- description: The release name of the application. for e.g. v1, v2, apple, banana, cherry , etc
  displayName: Release Name
  name: RELEASE_NAME
- description: The Environment in which to release this application. For e.g. DEV, TEST, PTA, PROD
  displayName: Environment
  name: ENVIRONMENT
  required: true
- description: Git repository url of where Jenkin files of Release pipelines are maintained. 
  displayName: Git repository URL of Jenkins Pipelines
  name: JENKINS_PIPELINE_GIT_URL
  required: true
- description: Path of jenkinsfile for Rollout pipeline. It should be relative to context directory of Git repository url of of Jenkins Pipelines. 
  displayName: Path of Rollout pipeline jenkinsfile
  name: ROLLOUT_JENKINSFILE_PATH
  required: true
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-${RELEASE_NAME}-${ENVIRONMENT}
      name: ${APP_NAME}-${RELEASE_NAME}-${ENVIRONMENT}-rollout
    name: ${APP_NAME}-${RELEASE_NAME}-${ENVIRONMENT}-rollout
  spec:
    source:
      git:
        uri: ${JENKINS_PIPELINE_GIT_URL}
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: ${ROLLOUT_JENKINSFILE_PATH}
      type: JenkinsPipeline
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic